{
  "extends": "eslint:recommended",
  "rules": {

    /***************************************************************************/
    /*                            Possible Errors
        /* These rules relate to possible syntax or logic errors in JavaScript code
        /***************************************************************************/

    "no-await-in-loop": ["error"], //disallow await inside of loops
    "no-compare-neg-zero": ["error"], //disallow comparing against -0
    "no-extra-parens": ["error", "all", { "nestedBinaryExpressions": false }], //disallow unnecessary parentheses
    "no-prototype-builtins": ["error"], //disallow calling some Object.prototype methods directly on objects
    "no-template-curly-in-string": ["warn"], //disallow template literal placeholder syntax in regular strings
    "valid-jsdoc": ["warn"], //enforce valid JSDoc comments

    //Extended from "eslint:recommended"
    // "no-cond-assign": [], //disallow assignment operators in conditional expressions
    // "no-console": [], //disallow the use of console
    // "no-constant-condition": [], //disallow constant expressions in conditions
    // "no-control-regex": [], //disallow control characters in regular expressions
    // "no-debugger": [], //disallow the use of debugger
    // "no-dupe-args": [], //disallow duplicate arguments in function definitions
    // "no-dupe-keys": [], //disallow duplicate keys in object literals
    // "no-duplicate-case": [], //disallow duplicate case labels
    // "no-empty": [], //disallow empty block statements
    // "no-empty-character-class": [], //disallow empty character classes in regular expressions
    // "no-ex-assign": [], //disallow reassigning exceptions in catch clauses
    // "no-extra-boolean-cast": [], //disallow unnecessary boolean casts
    // "no-extra-semi": [], //disallow unnecessary semicolons
    // "no-func-assign": [], //disallow reassigning function declarations
    // "no-inner-declarations": [], //disallow variable or function declarations in nested blocks
    // "no-invalid-regexp": [], //disallow invalid regular expression strings in RegExp constructors
    // "no-irregular-whitespace": [], //disallow irregular whitespace outside of strings and comments
    // "no-obj-calls": [], //disallow calling global object properties as functions
    // "no-regex-spaces": [], //disallow multiple spaces in regular expressions
    // "no-sparse-arrays": [], //disallow sparse arrays
    // "no-unexpected-multiline": [], //disallow confusing multiline expressions
    // "no-unreachable": [], //disallow unreachable code after return, throw, continue, and break statements
    // "no-unsafe-finally": [], //disallow control flow statements in finally blocks
    // "no-unsafe-negation": [], //disallow negating the left operand of relational operators
    // "use-isnan": [], //require calls to isNaN() when checking for NaN
    // "valid-typeof": [], //enforce comparing typeof expressions against valid strings,


    /*******************************************************************************/
    /*                             Best Practices
        /* These rules relate to better ways of doing things to help you avoid problems
        /*******************************************************************************/

    "accessor-pairs": ["error"], //enforce getter and setter pairs in objects
    "array-callback-return": ["error"], //enforce return statements in callbacks of array methods
    "block-scoped-var": ["error"], //enforce the use of variables within the scope they are defined
    "class-methods-use-this": ["error"], //enforce that class methods utilize this
    "complexity": ["error", { "max": 5 }], //enforce a maximum cyclomatic complexity allowed in a program
    "consistent-return": ["error"], //require return statements to either always or never specify values
    "curly": ["error", "all"], //enforce consistent brace style for all control statements
    "default-case": ["error"], //require default cases in switch statements
    "dot-location": ["error", "property"], //enforce consistent newlines before and after dots
    "dot-notation": ["error"], //enforce dot notation whenever possible
    "eqeqeq": ["error", "always"], //require the use of === and !==
    "guard-for-in": ["warn"], //require for-in loops to include an if statement
    "no-alert": ["warn"], //disallow the use of alert, confirm, and prompt
    "no-caller": ["warn"], //disallow the use of arguments.caller or arguments.callee
    "no-div-regex": ["warn"], //disallow division operators explicitly at the beginning of regular expressions
    "no-else-return": ["warn"], //disallow else blocks after return statements in if statements
    "no-empty-function": ["error"], //disallow empty functions
    "no-eq-null": ["error"], //disallow null comparisons without type-checking operators
    "no-eval": ["error"], //disallow the use of eval()
    "no-extend-native": ["error"], //disallow extending native types
    "no-extra-bind": ["error"], //disallow unnecessary calls to .bind()
    "no-extra-label": ["error"], //disallow unnecessary labels
    "no-floating-decimal": ["error"], //disallow leading or trailing decimal points in numeric literals
    "no-implicit-coercion": ["error"], //disallow shorthand type conversions
    "no-implicit-globals": ["error"], //disallow variable and function declarations in the global scope
    "no-implied-eval": ["error"], //disallow the use of eval()-like methods
    "no-invalid-this": ["error"], //disallow this keywords outside of classes or class-like objects
    "no-iterator": ["error"], //disallow the use of the __iterator__ property
    "no-labels": ["error"], //disallow labeled statements
    "no-lone-blocks": ["error"], //disallow unnecessary nested blocks
    "no-loop-func": ["error"], //disallow function declarations and expressions inside loop statements
    "no-magic-numbers": ["error"], //disallow magic numbers
    "no-multi-spaces": ["warn"], //disallow multiple spaces
    "no-multi-str": ["warn"], //disallow multiline strings
    "no-new": ["error"], //disallow new operators outside of assignments or comparisons
    "no-new-func": ["error"], //disallow new operators with the Function object
    "no-new-wrappers": ["error"], //disallow new operators with the String, Number, and Boolean objects
    "no-octal-escape": ["error"], //disallow octal escape sequences in string literals
    "no-param-reassign": ["error"], //disallow reassigning function parameters
    "no-proto": ["error"], //disallow the use of the __proto__ property
    "no-restricted-properties": ["off"], //disallow certain properties on certain objects
    "no-return-assign": ["error"], //disallow assignment operators in return statements
    "no-return-await": ["error"], //disallow unnecessary return await
    "no-script-url": ["error"], //disallow javascript: urls
    "no-self-compare": ["error"], //disallow comparisons where both sides are exactly the same
    "no-sequences": ["error"], //disallow comma operators
    "no-throw-literal": ["error"], //disallow throwing literals as exceptions
    "no-unmodified-loop-condition": ["error"], //disallow unmodified loop conditions
    "no-unused-expressions": ["error"], //disallow unused expressions
    "no-useless-call": ["warn"], //disallow unnecessary calls to .call() and .apply()
    "no-useless-concat": ["warn"], //disallow unnecessary concatenation of literals or template literals
    "no-useless-escape": ["warn"], //disallow unnecessary escape characters
    "no-useless-return": ["warn"], //disallow redundant return statements
    "no-void": ["error"], //disallow void operators
    "no-warning-comments": ["warn"], //disallow specified warning terms in comments
    "no-with": ["error"], //disallow with statements
    "prefer-promise-reject-errors": ["warn"], //require using Error objects as Promise rejection reasons
    "radix": ["warn"], //enforce the consistent use of the radix argument when using parseInt()
    "require-await": ["error"], //disallow async functions which have no await expression
    "vars-on-top": ["error"], //require var declarations be placed at the top of their containing scope
    "wrap-iife": ["error", "inside"], //require parentheses around immediate function invocations
    "yoda": ["warn", "never"], //require or disallow “Yoda” conditions

    //Extended from "eslint:recommended"
    // "no-case-declarations": [], //disallow lexical declarations in case clauses
    // "no-empty-pattern": [], //disallow empty destructuring patterns
    // "no-fallthrough": [], //disallow fallthrough of case statements
    // "no-global-assign": [], //disallow assignments to native objects or read-only global variables
    // "no-octal": [], //disallow octal literals
    // "no-redeclare": [], //disallow variable redeclaration
    // "no-self-assign": [], //disallow assignments where both sides are exactly the same
    // "no-unused-labels": [], //disallow unused labels

    /***************************************************************************
        /*                           Strict Mode
        /*             These rules relate to strict mode directives
        ***************************************************************************/
    "strict": ["error", "safe"], //require or disallow strict mode directives

    /***************************************************************************/
    /*                            Variables
        /*            These rules relate to variable declarations
        /***************************************************************************/
    "init-declarations": ["off"], //require or disallow initialization in variable declarations
    "no-catch-shadow": ["error"], //disallow catch clause parameters from shadowing variables in the outer scope
    "no-label-var": ["error"], //disallow labels that share a name with a variable
    "no-restricted-globals": ["error"], //disallow specified global variables
    "no-shadow": ["error", { "hoist": "all" }], //disallow variable declarations from shadowing variables declared in the outer scope
    "no-shadow-restricted-names": ["error"], //disallow identifiers from shadowing restricted names
    "no-undef-init": ["error"], //disallow initializing variables to undefined
    "no-undefined": ["error"], //disallow the use of undefined as an identifier
    "no-use-before-define": ["error"], //disallow the use of variables before they are defined

    //Extended from "eslint:recommended"
    // "no-delete-var": [], //disallow deleting variables
    // "no-undef": [], //disallow the use of undeclared variables unless mentioned in /*global */ comments
    // "no-unused-vars": [], //disallow unused variables

    /********************************************************************************/
    /*                        Node.js and CommonJS
        /*   These rules relate to code running in Node.js, or in browsers with CommonJS
        /********************************************************************************/
    // "callback-return": [], //require return statements after callbacks
    // "global-require": [], //require require() calls to be placed at top-level module scope
    // "handle-callback-err": [], //require error handling in callbacks
    // "no-mixed-requires": [], //disallow require calls to be mixed with regular variable declarations
    // "no-new-require": [], //disallow new operators with calls to require
    // "no-path-concat": [], //disallow string concatenation with __dirname and __filename
    // "no-process-env": [], //disallow the use of process.env
    // "no-process-exit": [], //disallow the use of process.exit()
    // "no-restricted-modules": [], //disallow specified modules when loaded by require
    // "no-sync": [], //disallow synchronous methods

    /*****************************************************************************/
    /*                         Stylistic Issues
        /* These rules relate to style guidelines, and are therefore quite subjective
        /*****************************************************************************/
    "array-bracket-spacing": ["warn", "never"], //enforce consistent spacing inside array brackets
    "block-spacing": ["warn", "always"], //enforce consistent spacing inside single-line blocks
    "brace-style": ["error", "stroustrup"], //enforce consistent brace style for blocks
    "camelcase": ["error", {"properties": "always"}], //enforce camelcase naming convention
    "capitalized-comments": ["warn", "always"], //enforce or disallow capitalization of the first letter of a comment
    "comma-dangle": ["error", "never"], //require or disallow trailing commas
    "comma-spacing": ["warn", { "before": false, "after": true }], //enforce consistent spacing before and after commas
    "comma-style": ["warn", "last"], //enforce consistent comma style
    "computed-property-spacing": ["error", "never"], //enforce consistent spacing inside computed property brackets
    "consistent-this": ["off"], //enforce consistent naming when capturing the current execution context
    "eol-last": ["error"], //require or disallow newline at the end of files
    "func-call-spacing": ["error", "never"], //require or disallow spacing between function identifiers and their invocations
    "func-name-matching": ["warn", "always"], //require function names to match the name of the variable or property to which they are assigned
    "func-names": ["error", "never"], //require or disallow named function expressions
    "func-style": ["off"], //enforce the consistent use of either function declarations or expressions
    "id-blacklist": ["warn"], //disallow specified identifiers
    "id-length": ["error", {"min": 3, "properties": "never", "exceptions": ["i", "j", "k", "e"]}], //enforce minimum and maximum identifier lengths
    "id-match": ["warn", "^_{0,1}a{0,1}[ensobar][a-zA-Z0-9]+$"], //require identifiers to match a specified regular expression
    "indent": ["error", "tab"], //enforce consistent indentation
    "jsx-quotes": ["off"], //enforce the consistent use of either double or single quotes in JSX attributes
    "key-spacing": ["warn", {"beforeColon": false, "afterColon": true, "mode": "strict"}], //enforce consistent spacing between keys and values in object literal properties
    "keyword-spacing": ["warn"], //enforce consistent spacing before and after keywords
    "line-comment-position": ["off"], //enforce position of line comments
    "linebreak-style": ["warn", "unix"], //enforce consistent linebreak style
    "lines-around-comment": ["off"], //require empty lines around comments
    "lines-around-directive": ["error", "always"], //require or disallow newlines around directives
    "max-depth": ["warn", {"max": 4}], //enforce a maximum depth that blocks can be nested
    "max-len": ["off"], //enforce a maximum line length
    "max-lines": ["error", {"max": 300, "skipBlankLines": true, "skipComments": true}], //enforce a maximum number of lines per file
    "max-nested-callbacks": ["error", {"max": 3}], //enforce a maximum depth that callbacks can be nested
    "max-params": ["off"], //enforce a maximum number of parameters in function definitions
    "max-statements": ["warn", {"max": 40}], //enforce a maximum number of statements allowed in function blocks
    "max-statements-per-line": ["warn", {"max": 1}], //enforce a maximum number of statements allowed per line
    "multiline-ternary": ["off"], //enforce newlines between operands of ternary expressions
    "new-cap": ["error"], //require constructor names to begin with a capital letter
    "new-parens": ["error"], //require parentheses when invoking a constructor with no arguments
    "newline-after-var": ["warn"], //require or disallow an empty line after variable declarations
    "newline-before-return": ["warn"], //require an empty line before return statements
    "newline-per-chained-call": ["warn"], //require a newline after each call in a method chain
    "no-array-constructor": ["warn"], //disallow Array constructors
    "no-bitwise": ["error"], //disallow bitwise operators
    "no-continue": ["off"], //disallow continue statements
    "no-inline-comments": ["off"], //disallow inline comments after code
    "no-lonely-if": ["off"], //disallow if statements as the only statement in else blocks
    "no-mixed-operators": ["warn"], //disallow mixed binary operators
    "no-multi-assign": ["off"], //disallow use of chained assignment expressions
    "no-multiple-empty-lines": ["error", { "max": 2, "maxBOF": 0, "maxEOF": 2 }], //disallow multiple empty lines
    "no-negated-condition": ["off"], //disallow negated conditions
    "no-nested-ternary": ["off"], //disallow nested ternary expressions
    "no-new-object": ["warn"], //disallow Object constructors
    "no-plusplus": ["off"], //disallow the unary operators ++ and --
    "no-restricted-syntax": ["off"], //disallow specified syntax
    "no-tabs": ["off"], //disallow all tabs
    "no-ternary": ["off"], //disallow ternary operators
    "no-trailing-spaces": ["warn"], //disallow trailing whitespace at the end of lines
    "no-underscore-dangle": ["error"], //disallow dangling underscores in identifiers
    "no-unneeded-ternary": ["error"], //disallow ternary operators when simpler alternatives exist
    "no-whitespace-before-property": ["error"], //disallow whitespace before properties
    "nonblock-statement-body-position": ["off"], //enforce the location of single-line statements
    "object-curly-newline": ["warn", { "multiline": true }], //enforce consistent line breaks inside braces
    "object-curly-spacing": ["warn"], //enforce consistent spacing inside braces
    "object-property-newline": ["warn"], //enforce placing object properties on separate lines
    "one-var": ["warn", "never"], //enforce variables to be declared either together or separately in functions
    "one-var-declaration-per-line": ["off"], //require or disallow newlines around variable declarations
    "operator-assignment": ["off"], //require or disallow assignment operator shorthand where possible
    "operator-linebreak": ["warn", "after"], //enforce consistent linebreak style for operators
    "padded-blocks": ["warn", "never"], //require or disallow padding within blocks
    "quote-props": ["error", "consistent"], //require quotes around object literal property names
    "quotes": ["warn", "double"], //enforce the consistent use of either backticks, double, or single quotes
    "require-jsdoc": ["warn"], //require JSDoc comments
    "semi": ["error", "always"], //require or disallow semicolons instead of ASI
    "semi-spacing": ["warn", {"before": false, "after": true}], //enforce consistent spacing before and after semicolons
    // "sort-keys": ["warn", {"caseSensitive": false, "natural": true}], //require object keys to be sorted
    // "sort-vars": ["warn", { "ignoreCase": true }], //require variables within the same declaration block to be sorted
    "space-before-blocks": ["warn", "always"], //enforce consistent spacing before blocks
    "space-before-function-paren": ["warn", "never"], //enforce consistent spacing before function definition opening parenthesis
    "space-in-parens": ["warn", "never"], //enforce consistent spacing inside parentheses
    "space-infix-ops": ["error"], //require spacing around infix operators
    "space-unary-ops": ["error", {"words": true, "nonwords": false}], //enforce consistent spacing before or after unary operators
    "spaced-comment": ["off"], //enforce consistent spacing after the // or /* in a comment
    "template-tag-spacing": ["off"], //require or disallow spacing between template tags and their literals
    "unicode-bom": ["error", "never"], //require or disallow Unicode byte order mark (BOM)
    "wrap-regex": ["off"], //require parenthesis around regex literals

    //Extended from "eslint:recommended"
    // "no-mixed-spaces-and-tabs": [], //disallow mixed spaces and tabs for indentation

    /***************************************************************************/
    /*                             ECMAScript 6
        /*            These rules relate to ES6, also known as ES2015
        /***************************************************************************/
    // "arrow-body-style": [], //require braces around arrow function bodies
    // "arrow-parens": [], //require parentheses around arrow function arguments
    // "arrow-spacing": [], //enforce consistent spacing before and after the arrow in arrow functions
    // "generator-star-spacing": [], //enforce consistent spacing around * operators in generator functions
    // "no-confusing-arrow": [], //disallow arrow functions where they could be confused with comparisons
    // "no-dupe-class-members": [], //disallow duplicate class members
    // "no-duplicate-imports": [], //disallow duplicate module imports
    // "no-restricted-imports": [], //disallow specified modules when loaded by import
    // "no-useless-computed-key": [], //disallow unnecessary computed property keys in object literals
    // "no-useless-constructor": [], //disallow unnecessary constructors
    // "no-useless-rename": [], //disallow renaming import, export, and destructured assignments to the same name
    // "no-var": [], //require let or const instead of var
    // "object-shorthand": [], //require or disallow method and property shorthand syntax for object literals
    // "prefer-arrow-callback": [], //require arrow functions as callbacks
    // "prefer-const": [], //require const declarations for variables that are never reassigned after declared
    // "prefer-destructuring": [], //require destructuring from arrays and/or objects
    // "prefer-numeric-literals": [], //disallow parseInt() in favor of binary, octal, and hexadecimal literals
    // "prefer-rest-params": [], //require rest parameters instead of arguments
    // "prefer-spread": [], //require spread operators instead of .apply()
    // "prefer-template": [], //require template literals instead of string concatenation
    // "rest-spread-spacing": [], //enforce spacing between rest and spread operators and their expressions
    // "sort-imports": [], //enforce sorted import declarations within modules
    // "symbol-description": [], //require symbol descriptions
    // "template-curly-spacing": [], //require or disallow spacing around embedded expressions of template strings
    // "yield-star-spacing": [] //require or disallow spacing around the * in yield* expressions

    //Extended from "eslint:recommended"
    // "constructor-super": [], //require super() calls in constructors
    // "no-class-assign": [], //disallow reassigning class members
    // "no-const-assign": [], //disallow reassigning const variables
    // "no-new-symbol": [], //disallow new operators with the Symbol object
    // "no-this-before-super": [], //disallow this/super before calling super() in constructors
    // "require-yield": [], //require generator functions to contain yield
  }
}
